{"data":{"allFile":{"edges":[{"node":{"childMarkdownRemark":{"id":"6396ef23-12c5-5cbc-8598-9d0b537f25d6","html":"<p>Gapminder viz is my first experiment with D3. I've had the opportunity to use other visualization libraries in previous projects but never D3. The goal is to produce a widely recognizable visualization. I had just finished reading <code>Factfulness: Ten Reasons We're Wrong About the World--and Why Things Are Better Than You Think</code> in 2018. The data on <a href=\"https://www.gapminder.org/\">Gapminder</a> make for excellent visualizations.</p>\n<p>I chose Gatsby because they provide a convenient plugin that converts <code>.json</code> files into object data at build time. It makes loading data a seamless process.</p>\n<p>Sadly, React does not work well with D3 when I was working on this. Both libraries try to manipulate the DOM. React relies on the <code>Virtual DOM</code> and creates a lot of friction with D3. Some integration code is required to get the two libraries to work together. Even then, transition animations are missing in D3.</p>\n<p>The integration code is not ideal. I want D3 code to be independent of frameworks so that D3 experience and documentation translate directly. No additional tweaks are required! I want to revisit D3 at a future date and try out other integrations.</p>","frontmatter":{"title":"Gapminder Visualization","startDate":"March 06, 2020","endDate":"March 25, 2020","description":"A D3 + Gatsby Fertility and Life Expectancy visualization","url":"https://danlin604.github.io/d3-gapminder/","source":"https://github.com/danlin604/d3-gapminder"}}}},{"node":{"childMarkdownRemark":{"id":"c63db2cc-3d19-5bc5-a4c1-9f4bf242e1bb","html":"<p>I am trying out wasm to hopefully include more Rust as well as other languages on the web. So far wasm isn't straightforward, but this can change with experience and time.</p>","frontmatter":{"title":"Hello, WASM & Rust","startDate":"February 26, 2020","endDate":"February 26, 2020","description":"Wasm & Rust Hello World","url":"https://danlin604.github.io/hello-wasm-rust/","source":"https://github.com/danlin604/hello-wasm-rust"}}}},{"node":{"childMarkdownRemark":{"id":"3e6467e7-0f23-5685-a7c1-c8b1e0cf4930","html":"<p>Learning Webpack gives me the <em>excuse</em> I need to start again from scratch. The previous CRA website requires me to custom code a lot of the content, all of which require additional styling. They are not maintainable at all.</p>\n<p><em>Maintainability</em> is one of the issues I want to address. Markdown simplifies the website because the content is separate from the code. Styling the <code>.md</code> in a single stylesheet offloads a lot of my future work.</p>\n<p>You can find emoji animation, imported P5 starfield animation, and a solar system built in A-Frame at <code>dev.danlin.ca</code>. I am trying out subdomain prefixing to see if it makes sense to separate future projects this way. Maintaining both <code>danlin.ca</code> and <code>dev.danlin.ca</code> is confusing, instead, I am going to migrate the Webpack website to GitHub Pages. Only one <em>main</em> project should be hosted on <code>danlin.ca</code> with a subdomain prefix allocated for development and staging.</p>","frontmatter":{"title":"Webpack React Website","startDate":"April 10, 2019","endDate":"February 06, 2020","description":"Config Config Config","url":"https://dev.danlin.ca","source":"https://github.com/danlin604/web"}}}},{"node":{"childMarkdownRemark":{"id":"0293426a-c264-5293-9f84-1d221fd31c4a","html":"<p>I worked on the legacy tour, rebuild tour, spotlight, and analytics for the Eyexpo platform.</p>\n<p>Legacy uses Angular.js, MySQL, Laravel, and the VR system uses A-Frame. Extending legacy is <em>time-consuming</em> because there are many side effects to track. It is the reason why there is a rebuild. We want to speed up development.</p>\n<p>Legacy features I worked on:</p>\n<ul>\n<li>Authentication</li>\n<li>Music playback</li>\n<li>VR editor: translate, scale, and rotate</li>\n</ul>\n<p>Rebuilding the platform is an evolving process because none of the developers have Angular experience. Conventions and best practices evolved through research and experience. <em>We code to expect change</em>.</p>\n<p>My goal with the rebuild is to have reusable A-Frame components. For example, a VR video requires multiple A-Frame components because a video implies a preview, a play button, a pause button, and they need to have predictable life cycles. Developers should be able to use the video component <em>out of the box</em>.</p>\n<p>Novel integration successes:</p>\n<ul>\n<li>Angular and A-Frame configurations</li>\n<li>Extend A-Frame with Three.js</li>\n<li>A-Frame components for Angular</li>\n</ul>\n<p>The spotlight model viewer project uses lessons learned from the rebuild. The development speed of the spotlight project validates the new front-end VR architecture designs.</p>\n<p>The analytics project leverages ElasticSearch, Elastic APM, OpenMetrics (now OpenTelemetry) to provide tracing, metrics, and logging, intending to show user insights. The design encompasses front-end visualization, analytics micro-service, and additional modification to existing micro-services to write to telemetry.</p>\n<p>Front-end went through many incremental changes. Different ways of handling states are tested:</p>\n<ul>\n<li>RxJS</li>\n<li>Services</li>\n<li>Smart &#x26; dumb components</li>\n<li>Caching</li>\n<li>Apollo</li>\n<li>NgRX</li>\n<li>Websocket events</li>\n</ul>\n<p>The goal is always to test and verify solutions for our projects.</p>","frontmatter":{"title":"Eyexpo Technology","startDate":"October 09, 2018","endDate":"January 30, 2020","description":"All-In-One Immersive Creation and Data Platform","url":"https://www.eyexpo.com/","source":""}}}},{"node":{"childMarkdownRemark":{"id":"7e25a356-c9b9-5c2e-b55a-1af25bcaa518","html":"<p>I want to revisit web development using React. It is similar to React Native as they share the same React library. CSS translates well between these frameworks.</p>\n<p>This website is built on top of <code>create-react-app</code>, and the default starter is highly optimized. Very little work needs to be done to get started. There are some parts where I had to dig in further, such as their cache-busting implementation and how CRA abstracts away Webpack.</p>\n<p>I heard good things about <code>styled-components</code> before starting on my website. The speaker claims that refactoring non-styled-component CSS to <code>styled-component</code> is a <em>totally zen</em> experience. They got me <em>curious</em>. Not having to worry about interfering CSS styles and confidently write CSS with no worry is an attractive feature. So I gave it a try! I love the CSS isolation, and I like the first-class component support. <code>styled-component</code> has the potential to solve a lot of React CSS issues. I'd recommend them if developers struggle with leaky styles.</p>\n<p>I played a little bit with <code>p5.js</code> integration in React. I can get them working. However, support for both is limited and potentially <em>hacky</em>.</p>\n<p>This website is hosted on AWS. I want to register an account, buy a domain, host a website, secure the website, and optimize the performance of the website. As of writing, this project is hosted on <a href=\"https://danlin.ca\">danlin.ca</a>. It will only serve <code>HTTPS</code> for the following URLs: <code>danlin.ca</code>, <code>www.danlin.ca</code>, <code>http://danlin.ca</code>, <code>http://www.danlin.ca</code>. It also prevents direct bucket access because having unknown users access my S3 bucket is a <em>terrible security risk</em>! Cutting off S3 was non-trivial, but in the end, I have Cloudfront, and a way to cache-bust the deployment.</p>\n<p>The website ends up costing about $1 CAD per month. I will be retiring the CRA website and migrate it to GitHub Pages in favor of moving newer projects to my primary domain.</p>","frontmatter":{"title":"CRA Website","startDate":"May 12, 2018","endDate":"December 01, 2018","description":"Simple React Website","url":null,"source":"https://github.com/danlin604/website-react"}}}},{"node":{"childMarkdownRemark":{"id":"e9ea400c-7d8d-56b5-8420-57c6dcec8df7","html":"<p>BarterBay uses Next.js, React Native, Node.js, PostgreSQL, and AWS services. My focuses are the following:</p>\n<ul>\n<li>Business &#x26; marketing research</li>\n<li>Business proposals</li>\n<li>Terms of service &#x26; user agreements</li>\n<li>React Native development</li>\n<li>Authentication services</li>\n<li>Security</li>\n<li>PostgreSQL functions &#x26; schema designs</li>\n</ul>\n<p>Most of the complex business logic for our bartering system is located in the PostgreSQL database:</p>\n<ul>\n<li>Full-text search</li>\n<li>Anonymized GIS</li>\n<li>Bartering system</li>\n<li>Real-time chat</li>\n<li>Authentication</li>\n</ul>\n<p>We work in a small team consisting of the CEO, designer, and developers. The environment is informal but has a heavy emphasis on research and design. Every design is analyzed by the team and goes through a <em>dogfooding</em> process. We end up with an in-depth understanding of our system and our business needs, which increased our <em>confidence in our designs</em>.</p>\n<p>Much of the time is spent on these design meetings, which may be a necessary cost. I end up with a great love for the <em>whiteboarding</em> process and <em>sequence diagrams</em> here.</p>","frontmatter":{"title":"BarterBay Exchange","startDate":"August 01, 2017","endDate":"May 30, 2018","description":"buy, sell and trade with real people around you","url":"https://barterbay.ca","source":""}}}},{"node":{"childMarkdownRemark":{"id":"2291d70f-3e3c-567c-85bd-593eed535dfd","html":"<p>A website to learn the basics of web development. Key concepts are self-executing JS scripts, ES5 syntax, partial re-render of web elements, and HTML/CSS design patterns.</p>\n<p>Here you can find my attempt at a JS Fiddle and a CSS scene. Sadly regression occurred at some point so I reverted this project to its pre-Polymer commit.</p>","frontmatter":{"title":"Vanilla JS Website","startDate":"December 20, 2016","endDate":"May 26, 2017","description":"Web Development 101","url":"https://danlin604.github.io/website/","source":"https://github.com/danlin604/website"}}}},{"node":{"childMarkdownRemark":{"id":"bf192bbc-4a7c-5dca-a3fa-acb68ee0e317","html":"<p>Android Music Player is a student group project for the mobile development course in BCIT. It allows for <code>.flac</code> playback as well as commonly supported file extensions. It plays music asynchronously and recursively scans through the user's media folders. It follows the 2016 Android permission guidelines.</p>","frontmatter":{"title":"Android Music Player","startDate":"October 08, 2016","endDate":"November 29, 2016","description":"Lists and plays music","url":"youtu.be/xxdy4SwaoJg","source":"https://github.com/danlin604/MediaPlayer"}}}},{"node":{"childMarkdownRemark":{"id":"ec360cca-5100-52df-a701-4fc6bc7bd295","html":"<p><a href=\"https://saab.com/\">SAAB</a> is a Swedish aerospace and defense company. SAAB Technologies, based in Burnaby, is part of its maritime traffic management division. I worked at SAAB through BCIT's Co-op program for two semesters:</p>\n<ul>\n<li>Migrating legacy Delphi application to C#</li>\n<li>SQL reports for various ports</li>\n</ul>\n<p>Migrating and updating tariff scripts from the 2-tier Delphi application to the newer n-tier C# application for the Port of Papua New Guinea helped me learn the basic syntax for both languages. It is an opportunity to learn the business logic for ports.</p>\n<p>Client T-SQL scripts are written for port departments. The data is parsed by FastReport for printable views. They show business, financial, and resource information for port stakeholders. These scripts can be complex SQL queries and require an in-depth understanding of database schemas.</p>","frontmatter":{"title":"SAAB Technologies","startDate":"January 01, 2015","endDate":"August 30, 2015","description":"Port Management System","url":"https://saab.com/about-saab/sites/maritime-traffic-management/","source":null}}}}]}}}